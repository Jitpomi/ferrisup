use leptos::prelude::*;
use leptos_meta::{provide_meta_context, MetaTags, Stylesheet, Title};
use leptos_router::{
    components::{Route, Router, Routes},
    StaticSegment,
};

use crate::api::{add_todo, delete_todo, get_todos, update_todo, Todo};

pub fn shell(options: LeptosOptions) -> impl IntoView {
    view! {
        <!DOCTYPE html>
        <html lang="en">
            <head>
                <meta charset="utf-8"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <AutoReload options=options.clone() />
                <HydrationScripts options/>
                <MetaTags/>
            </head>
            <body>
                <App/>
            </body>
        </html>
    }
}

#[component]
pub fn App() -> impl IntoView {
    // Provides context that manages stylesheets, titles, meta tags, etc.
    provide_meta_context();

    view! {
        // injects a stylesheet into the document <head>
        // id=leptos means cargo-leptos will hot-reload this stylesheet
        <Stylesheet id="leptos" href="/pkg/{{project_name}}.css"/>

        // sets the document title
        <Title text="Leptos Fullstack Todo App"/>

        // content for this welcome page
        <Router>
            <main>
                <Routes fallback=|| "Page not found.".into_view()>
                    <Route path=StaticSegment("") view=TodoPage/>
                    <Route path=StaticSegment("about") view=AboutPage/>
                </Routes>
            </main>
        </Router>
    }
}

/// Renders the todo app page
#[component]
fn TodoPage() -> impl IntoView {
    let todos = create_resource(|| (), |_| get_todos());
    let (new_todo, set_new_todo) = create_signal(String::new());
    
    let add_todo_action = create_server_action::<add_todo>();
    let delete_todo_action = create_server_action::<delete_todo>();
    let update_todo_action = create_server_action::<update_todo>();
    
    // After adding a todo, clear the input and refresh the list
    create_effect(move |_| {
        if add_todo_action.version().get() > 0 {
            set_new_todo.set("".to_string());
            todos.refetch();
        }
    });
    
    // After updating or deleting, refresh the list
    create_effect(move |_| {
        if delete_todo_action.version().get() > 0 || update_todo_action.version().get() > 0 {
            todos.refetch();
        }
    });
    
    let handle_submit = move |ev: ev::SubmitEvent| {
        ev.prevent_default();
        let todo_title = new_todo.get();
        if !todo_title.is_empty() {
            add_todo_action.dispatch(add_todo { title: todo_title });
        }
    };

    view! {
        <div class="container">
            <h1>"Todo App"</h1>
            <p>"A fullstack Leptos application with server functions"</p>
            
            <form on:submit=handle_submit class="add-form">
                <input 
                    type="text"
                    placeholder="Add a new todo..."
                    prop:value=new_todo
                    on:input=move |ev| set_new_todo.set(event_target_value(&ev))
                />
                <button type="submit">"Add"</button>
            </form>
            
            <div class="todo-list">
                <Suspense fallback=move || view! { <p>"Loading todos..."</p> }>
                    {move || {
                        todos.get().map(|todos_result| {
                            match todos_result {
                                Ok(todos) => {
                                    if todos.is_empty() {
                                        view! { <p class="empty-list">"No todos yet. Add one above!"</p> }.into_view()
                                    } else {
                                        todos.into_iter()
                                            .map(|todo| {
                                                let id = todo.id.clone();
                                                let delete_id = id.clone();
                                                
                                                view! {
                                                    <div class="todo-item">
                                                        <label class=if todo.completed { "completed" } else { "" }>
                                                            <input 
                                                                type="checkbox" 
                                                                prop:checked=todo.completed
                                                                on:change=move |ev| {
                                                                    let checked = event_target_checked(&ev);
                                                                    update_todo_action.dispatch(update_todo { 
                                                                        id: id.clone(), 
                                                                        completed: checked 
                                                                    });
                                                                }
                                                            />
                                                            <span>{todo.title}</span>
                                                        </label>
                                                        <button 
                                                            class="delete-btn"
                                                            on:click=move |_| {
                                                                delete_todo_action.dispatch(delete_todo { id: delete_id.clone() });
                                                            }
                                                        >
                                                            "Ã—"
                                                        </button>
                                                    </div>
                                                }
                                            })
                                            .collect_view()
                                    }
                                }
                                Err(e) => view! { <p>"Error loading todos: " {e.to_string()}</p> }.into_view()
                            }
                        })
                    }}
                </Suspense>
            </div>
            
            <div class="navigation">
                <a href="/about">"About"</a>
            </div>
        </div>
    }
}

/// Renders the about page.
#[component]
fn AboutPage() -> impl IntoView {
    view! {
        <div class="container">
            <h1>"About"</h1>
            <p>"This is a fullstack Leptos application with server functions."</p>
            <p>"Here are some key features of this application:"</p>
            <ul>
                <li>"Server Functions - Call Rust functions on the server from the client"</li>
                <li>"Fine-grained reactivity - Only update what changes"</li>
                <li>"Server-side rendering - Fast initial page loads"</li>
                <li>"Hydration - Seamless client-side interactivity"</li>
            </ul>
            
            <div class="navigation">
                <a href="/">"Back to Todos"</a>
            </div>
        </div>
    }
}
