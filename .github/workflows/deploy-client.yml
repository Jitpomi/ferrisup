name: Deploy Client to GitHub Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install Dioxus CLI
        run: cargo install dioxus-cli --locked
      
      - name: Build website
        run: |
          cd client
          # Ensure the assets directory exists in the output
          mkdir -p dist/assets
          # Copy all asset files to ensure they're available during build
          cp -r assets/* dist/assets/ || true
          cp -r public/* dist/ || true
          # Build the website
          dx build --release
      
      - name: Fix paths for GitHub Pages
        run: |
          cd target/dx/client/release/web/public
          # Create .nojekyll file to prevent GitHub Pages from processing the site with Jekyll
          touch .nojekyll
          # Copy CNAME file if it exists
          if [ -f "$GITHUB_WORKSPACE/client/public/CNAME" ]; then
            cp "$GITHUB_WORKSPACE/client/public/CNAME" .
          fi
          
          # First, let's examine what files the HTML is actually referencing
          echo "Examining HTML to find referenced assets:"
          grep -o '/assets/[^"]*' index.html || echo "No asset references found in HTML"
          
          # Ensure the assets directory exists at the root level
          mkdir -p assets
          
          # Copy ALL assets from client/assets to ensure we have everything
          echo "Copying all assets from client/assets to /assets/"
          cp -r "$GITHUB_WORKSPACE/client/assets/"* assets/ || echo "No assets found in client/assets"
          
          # Also copy from public/assets if it exists
          if [ -d "$GITHUB_WORKSPACE/client/public/assets" ]; then
            echo "Copying assets from client/public/assets"
            cp -r "$GITHUB_WORKSPACE/client/public/assets/"* assets/ || echo "No assets found in client/public/assets"
          fi
          
          # Ensure specific files that we know are referenced are definitely there
          echo "Ensuring specific assets are present:"
          for file in favicon.ico img.png ferrisup-logo.png tailwind.css; do
            if [ ! -f "assets/$file" ]; then
              # Try to find the file anywhere in the project
              echo "Looking for $file in the project"
              find "$GITHUB_WORKSPACE" -name "$file" -not -path "*/node_modules/*" -not -path "*/target/*" | head -1 | xargs -I{} cp "{}" "assets/$file" || echo "Could not find $file"
            fi
          done
          
          # Debug - list files to verify assets are present
          echo "Listing files in build directory:"
          find . -type f | sort
          
          echo "Listing files in assets directory:"
          find ./assets -type f | sort || true
          
          # Verify that all referenced assets exist
          echo "Verifying all referenced assets exist:"
          for asset in $(grep -o '/assets/[^"]*' index.html | sed 's|/assets/||'); do
            if [ -f "assets/$asset" ]; then
              echo "✓ Found: $asset"
            else
              echo "✗ Missing: $asset"
            fi
          done
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './target/dx/client/release/web/public'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
